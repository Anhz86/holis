/* AnalizadorARM.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorARM.java */
import java.io.*;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.PrintWriter;

public class AnalizadorARM implements AnalizadorARMConstants {
    //Array que guarda los Errores encontrados en el codigo que se ejecuta
    static ArrayList<String> tabla = AnalizadorARMTokenManager.tablaErrores;
    //Array que guarda los Errores semanticos encontrados en el codigo
    static ArrayList<String> tabla2 = new ArrayList<String>();
    //Array que guarda los valores para convertirlos a cuadruplos
    static ArrayList<String> intermediateCode = new ArrayList<String>();
    //Generamos una tabla de simbolos
    public SymbolTable tablaSimbolos = new SymbolTable();

    public SymbolTable getSymbolTable() {
        return tablaSimbolos;
    }

    static int tempCount = 0;
    static int labelCount = 0;
    //Generamos una tabla de simbolos
    //private SymbolTable tablaSimbolos = new SymbolTable();

    //Crea una nueva variable temporal
    static String newTemp() {
            return "t" + tempCount++;
    }
    static String newLabel() {
            return "L" + labelCount++;
    }

    //Guarda las variaables temporales con su respectiva operacion en el Array
    static void emit(String op, String arg1, String arg2, String result) {
        if (arg2.isEmpty()) {
            intermediateCode.add(result + " -> " + op + " " + arg1);
        } else {
            intermediateCode.add(result + " -> " + arg1 + " " + op + " " + arg2);
        }
    }

    public static void main(String[] args) {
        try {
            // Guarda el primer archivo mandado
            String nombreArchivo = args[0];
            //Genera un FileReader para leer el archivo y da el archivo como parametro
            FileReader lector = new FileReader(nombreArchivo);
            //Crea una instancia de AnalizadorARM, pasando el lector del archivo como argumento.
            AnalizadorARM parser = new AnalizadorARM(lector);

            //Llama al método parse para comenzar el análisis léxico y sintáctico del archivo.
            parser.parse(nombreArchivo);


        try{
            FileWriter archivo = new FileWriter("Cuadruplos.txt");
            PrintWriter escritor = new PrintWriter(archivo);

        for (String code : intermediateCode) {
            escritor.println(code);
        }
        escritor.close();

        }catch(IOException e){

        }


            //Si se encuentras algun objeto en la lista tabla es que hay un error sintatico asi que se imprime el error
            if (tabla.size() != 0) {
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005cn** Se encontraron errores sint\u00e1cticos en el c\u00f3digo **\u005cn");
                for (String error : tabla) {
                    System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \u005cn");
                    System.out.println(error);
                }
            } else { //Si no hay ningun error se meciona y se sigue
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005ct ** NO se encontraron errores sint\u00e1cticos en el c\u00f3digo ** ");
            }

            if (tabla2.size() != 0) {
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005cn** Se encontraron errores semanticos en el c\u00f3digo **\u005cn");
                for (int i = 0; tabla2.size() > i; i++ ) {
                    System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \u005cn");
                    System.out.println(tabla2.get(i));
                }
            } else { //Si no hay ningun error se meciona y se sigue
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005ct ** NO se encontraron errores semanticos en el c\u00f3digo ** ");
            }
        } catch (FileNotFoundException fe) {
            System.out.println(fe.getMessage());
        } catch (IOException io) {
            System.out.println(io.getMessage());
        }
    }

    //Aqui se lee los tokems y se pasan por el analizis sintatico y lexico
    public void parse(String nombreArchivo) throws IOException {
        Token token; //Se genera una variable tipo Token para guardar las variables del texto
        int columna = 1; // Contador de columna
        FileReader lector = new FileReader(nombreArchivo); //Se genera otro Redactor para leer el archivo
        //Genera tokems desde el archivo de entrada
        AnalizadorARMTokenManager lexicManager = new AnalizadorARMTokenManager(new SimpleCharStream(lector));


        //Variables para saber si hay errores y saber si se analizo todo el archivo
        boolean seEncontraronErrores = false;
        boolean seVerificaronTokens = false;

        String tipoActual = ""; // Para mantener el tipo de la variable actual
        boolean esperandoIdentificador = false; // Para saber si después de un tipo debemos esperar un identificador (nombre de la variable)


        // Analiza los tokens léxicos hasta el final del archivo
        while ((token = lexicManager.getNextToken()).kind != AnalizadorARMConstants.EOF) {
            seVerificaronTokens = true;
            if (token.specialToken != null) { //Detecta si el tokem es especial y ajusta el contador de columna
                String specialTokenImage = token.specialToken.image;
                for (int i = 0; i < specialTokenImage.length(); i++) {
                    if (specialTokenImage.charAt(i) == '\u005cn') {
                        columna = 1; // Reiniciar el contador de columna en cada salto de línea
                    }
                }
            }
            if (token.kind == AnalizadorARMConstants.ERROR) { //Si se encuentra un error se comunica
                if (!seEncontraronErrores) {
                    System.out.print("\u005ct ** Se encontraron errores l\u00e9xicos en el c\u00f3digo ** \u005cn");
                    seEncontraronErrores = true;
                } //Se muestra el tokem y la linea y columna
                System.out.print("Error l\u00e9xico en l\u00ednea " + (token.beginLine) + ", columna " + columna + "\u005cn");
                System.out.print("Car\u00e1cter inv\u00e1lido: " + (char) token.image.charAt(0) + "\u005cn");
            } else {
                columna += token.image.length(); // Incrementar el contador de columna por la longitud del token
            }

            // Detectar el nombre de la variable (identificador)
        if (esperandoIdentificador && token.kind == AnalizadorARMConstants.IDENTIFICADOR) {
            String nombreVariable = token.image;

            // Verificar si la variable ya existe en la tabla de símbolos
            if (tablaSimbolos.contains(nombreVariable)) {
                System.out.println("Error sem\u00e1ntico: La variable " + nombreVariable + " ya ha sido declarada");
            } else {
                tablaSimbolos.addSymbol(nombreVariable, tipoActual); // Agregar la variable a la tabla de símbolos
                System.out.println("S\u00edmbolo agregado: " + nombreVariable + ", Tipo: " + tipoActual);
            }
            esperandoIdentificador = false; // Ya no esperamos un identificador hasta que haya otro tipo de variable
        }



            // Si encontramos un tipo de dato (int, float, boolean)
        if (token.kind == AnalizadorARMConstants.ENT || token.kind == AnalizadorARMConstants.FLOT || token.kind == AnalizadorARMConstants.BOOL) {
            tipoActual = token.image; // Guardamos el tipo (ej. "int")
            esperandoIdentificador = true; // Ahora esperamos que el próximo token sea el nombre de la variable
        }




        }


        //Si no se encontraron se comunica
        if (!seEncontraronErrores && seVerificaronTokens) {
            System.out.print("\u005ct ** NO se encontraron errores l\u00e9xicos en el c\u00f3digo ** \u005cn");
        }

        // Ahora intenta analizar la gramática
        try {
            principal();  // Aquí comienza el análisis de la gramática
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }


    // Imprimir la tabla de símbolos después de todo el análisis
    System.out.println("Tabla de s\u00edmbolos:");
    tablaSimbolos.Tabla();  // Aquí imprime la tabla en la consola
    }



    //Traduce el mensaje de error
    String manejarErrorSintactico(ParseException e) {
        // Traduce el mensaje de error de inglés a español
        String mensajeOriginal = e.getMessage();
        String mensajeTraducido = mensajeOriginal
            .replace("Encountered", "Encontrado")
            .replace("at line", "en la l\u00ednea")
            .replace("column", "columna")
            .replace("Was expecting:", "Se esperaba:")
            .replace("Was expecting one of:", "Se espera una de estas opciones:");

        // Retorna el mensaje de error traducido
        return "Error sint\u00e1ctico: " + mensajeTraducido + "\u005cn" + "Token actual: " + e.currentToken + "\u005cn";

    }

  final public void principal() throws ParseException {
    try {
tablaSimbolos.enterScope();
      jj_consume_token(INICIO);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(LLAVEIZQ);
      label_1:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(LLAVEDER);
      jj_consume_token(FIN);
tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void Codigo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      declararVariable();
      break;
      }
    case ESCRIBIR:{
      gramaticaEscribir();
      break;
      }
    case LEER:{
      gramaticaLeer();
      break;
      }
    case SI:{
      gramaticaSi();
      break;
      }
    case WHILE:{
      gramaticaWhile();
      break;
      }
    case IDENTIFICADOR:{
      gramaticaAsignacion();
      break;
      }
    case BOOL:{
      gramaticaOperadorLogico();
      break;
      }
    case FOR:{
      gramaticaFor();
      break;
      }
    case ENT:{
      inicializarArregloEntero();
      break;
      }
    case CAD:{
      inicializarArregloCadena();
      break;
      }
    case PROC:{
      SentenciasProcedimientos();
      break;
      }
    case FUNC:{
      SentenciasFunciones();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declararVariable() throws ParseException {Token t,t1, t3;
    try {
      jj_consume_token(VAR);
      t1 = tipoDato();
      t = jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        valor();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(DELIMITADOR);
emit("", t.image, "", t1.image);

            if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public Token tipoDato() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENT:{
      t = jj_consume_token(ENT);
      break;
      }
    case FLOT:{
      t = jj_consume_token(FLOT);
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
      break;
      }
    case CAD:{
      t = jj_consume_token(CAD);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token valor2(String tipoEsperado) throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTEROS:{
      t = jj_consume_token(ENTEROS);
if (!tipoEsperado.equals("ent") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error sem\u00e1ntico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontr\u00f3 un entero");
        }
        {if ("" != null) return t;}
      break;
      }
    case VCAD:{
      t = jj_consume_token(VCAD);
if (!tipoEsperado.equals("cad") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error sem\u00e1ntico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontr\u00f3 una cadena");
        }
        {if ("" != null) return t;}
      break;
      }
    case NUMERODECIMAL:{
      t = jj_consume_token(NUMERODECIMAL);
if (!tipoEsperado.equals("flot") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error sem\u00e1ntico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontr\u00f3 un n\u00famero decimal");
        }
        {if ("" != null) return t;}
      break;
      }
    case IDENTIFICADOR:{
      t = jj_consume_token(IDENTIFICADOR);
if (!tablaSimbolos.contains(t.image) && !tipoEsperado.isEmpty()) {
            tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " no ha sido declarada");
        } else if (!tablaSimbolos.checkType(t.image, tipoEsperado)) {
            tabla2.add("Error sem\u00e1ntico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontr\u00f3 " + tablaSimbolos.getType(t.image));
        }
        {if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTEROS:{
      jj_consume_token(ENTEROS);
      break;
      }
    case VCAD:{
      jj_consume_token(VCAD);
      break;
      }
    case NUMERODECIMAL:{
      jj_consume_token(NUMERODECIMAL);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void gramaticaEscribir() throws ParseException {
    try {
      jj_consume_token(ESCRIBIR);
      jj_consume_token(PARENIZQ);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VCAD:{
          jj_consume_token(VCAD);
          break;
          }
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONCATENAR:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
          jj_consume_token(CONCATENAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VCAD:{
            jj_consume_token(VCAD);
            break;
            }
          case IDENTIFICADOR:{
            jj_consume_token(IDENTIFICADOR);
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:
        case VCAD:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(PARENDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaLeer() throws ParseException {
    try {
      jj_consume_token(LEER);
      jj_consume_token(PARENIZQ);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaSi() throws ParseException {String labelElse, labelEnd;
    try {
tablaSimbolos.enterScope();
            labelElse = newLabel();
            labelEnd = newLabel();
      jj_consume_token(SI);
      jj_consume_token(PARENIZQ);
      condicion(labelElse);
emit("goto", "t" + String.valueOf(tempCount-1), "", labelEnd);
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_4:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(LLAVEDER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SINO:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        gramaticaSiNo();
      }
emit("label", "", "", labelEnd);
                tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaSiNo() throws ParseException {
    try {
tablaSimbolos.enterScope();
      jj_consume_token(SINO);
      jj_consume_token(LLAVEIZQ);
      label_6:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(LLAVEDER);
tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicion(String labelElse) throws ParseException {Token t1,t2,op;
    try {
      t1 = valor2(labelElse);
      op = OperadoresComparadores();
      t2 = valor2(labelElse);
String temp = newTemp();
        emit(op.image, t1.image, t2.image, temp);
        // emit("if", labelElse, "", temp);

      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        condicionLogicos();
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionLogicos() throws ParseException {
    try {
      OperadoresLogicos();
      valor();
      OperadoresComparadores();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void OperadoresLogicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Token OperadoresComparadores() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUALDAD:{
      t = jj_consume_token(IGUALDAD);
      break;
      }
    case DESIGUALDAD:{
      t = jj_consume_token(DESIGUALDAD);
      break;
      }
    case MAYOR:{
      t = jj_consume_token(MAYOR);
      break;
      }
    case MENOR:{
      t = jj_consume_token(MENOR);
      break;
      }
    case MAYORIGUAL:{
      t = jj_consume_token(MAYORIGUAL);
      break;
      }
    case MENORIGUAL:{
      t = jj_consume_token(MENORIGUAL);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void gramaticaWhile() throws ParseException {String labelStart, labelEnd;
    try {
labelStart = newLabel();
            labelEnd = newLabel();
            tablaSimbolos.enterScope();
            emit("label", "", "", labelStart);
      jj_consume_token(WHILE);
      jj_consume_token(PARENIZQ);
      condicion("");
emit("goto", "t" + String.valueOf(tempCount-1), "", labelEnd);
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_8:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(LLAVEDER);
tablaSimbolos.exitScope();
            emit("goto", "", "", labelStart);
            emit("label", "", "", labelEnd);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaAsignacion() throws ParseException {Token t; String t2;
    try {
      t = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      t2 = operacionSimple(tablaSimbolos.getType(t.image));
if(!tablaSimbolos.contains(t.image)){
                    tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " no ha sido declarada");
                }
                emit("=",t2, "", t.image);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public String operacionSimple(String type) throws ParseException {Token t1 ;String t , t2;
    try {
      t = termino(type);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAS:
        case MENOS:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        t1 = operadorAritmeticoMasMenos();
        t2 = termino(type);
String temp = newTemp();
            emit(t1.image,t,t2,temp);
            t = temp;
      }
{if ("" != null) return t;}
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
    throw new Error("Missing return statement in function");
  }

  final public String operacionParentesis(String type) throws ParseException {String t;
    try {
      jj_consume_token(PARENIZQ);
      t = operacionSimple(type);
      jj_consume_token(PARENDER);
{if ("" != null) return t;}
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
    throw new Error("Missing return statement in function");
  }

  final public Token operadorAritmeticoMasMenos() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      t = jj_consume_token(MAS);
      break;
      }
    case MENOS:{
      t = jj_consume_token(MENOS);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token operadorAritmeticoMulDiv() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      t = jj_consume_token(MULT);
      break;
      }
    case DIV:{
      t = jj_consume_token(DIV);
      break;
      }
    case RES:{
      t = jj_consume_token(RES);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String termino(String type) throws ParseException {String t1, t2; Token op;
    t1 = Factor(type);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:
      case RES:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      op = operadorAritmeticoMulDiv();
      t2 = Factor(type);
String temp = newTemp();
            emit(op.image, t1, t2, temp);
            t1 = temp;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public String Factor(String type) throws ParseException {Token t; String t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTEROS:
    case NUMERODECIMAL:
    case IDENTIFICADOR:
    case VCAD:{
      t = valor2(type);
{if ("" != null) return t.image;}
      break;
      }
    case PARENIZQ:{
      t1 = operacionParentesis(type);
{if ("" != null) return t1;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void gramaticaOperadorLogico() throws ParseException {
    try {
      jj_consume_token(BOOL);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      condicionLogico();
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionLogico() throws ParseException {
    try {
      valor();
      OperadoresLogicos();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaFor() throws ParseException {
    try {
tablaSimbolos.enterScope();
      jj_consume_token(FOR);
      jj_consume_token(PARENIZQ);
      condicionFor();
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_11:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(LLAVEDER);
tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionFor() throws ParseException {
    try {
      tipoDato();
      comparacionForIgual();
      jj_consume_token(DELIMITADOR);
      comparacionFor();
      jj_consume_token(DELIMITADOR);
      operadorIncDec();
      jj_consume_token(IDENTIFICADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void comparacionFor() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      OperadoresComparadores();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void comparacionForIgual() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      jj_consume_token(ENTEROS);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void operadorIncDec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INC:{
      jj_consume_token(INC);
      break;
      }
    case DEC:{
      jj_consume_token(DEC);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void inicializarArregloEntero() throws ParseException {Token t, t1, ta; int cantidadValores = 0; int tamanio;
    try {
      t1 = jj_consume_token(ENT);
      t = jj_consume_token(IDENTIFICADOR);
if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
      jj_consume_token(CORCHIZQ);
      ta = jj_consume_token(ENTEROS);
      jj_consume_token(CORCHDER);
      jj_consume_token(IGUAL);
      jj_consume_token(LLAVEIZQ);
      cantidadValores = ValoresEntero(cantidadValores);
      jj_consume_token(LLAVEDER);
      jj_consume_token(DELIMITADOR);
cantidadValores = cantidadValores + 1;
        tamanio = Integer.parseInt(ta.image);
         if(cantidadValores > tamanio) tabla2.add("Error sem\u00e1ntico: Se exedio el tama\u00f1o del arreglo");
         if(cantidadValores < tamanio) tabla2.add("Error sem\u00e1ntico: No se abarco todo el tama\u00f1o del arreglo");
         if(tamanio == 0) tabla2.add("Error sem\u00e1ntico: Valor no permitido");
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void inicializarArregloCadena() throws ParseException {Token t, t1, ta; int tamanio, cantidadValores = 0;
    try {
      t1 = jj_consume_token(CAD);
      t = jj_consume_token(IDENTIFICADOR);
if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
      jj_consume_token(CORCHIZQ);
      ta = jj_consume_token(ENTEROS);
      jj_consume_token(CORCHDER);
      jj_consume_token(IGUAL);
      jj_consume_token(LLAVEIZQ);
      cantidadValores = ValoresCadena(cantidadValores);
      jj_consume_token(LLAVEDER);
      jj_consume_token(DELIMITADOR);
cantidadValores = cantidadValores + 1;
        tamanio = Integer.parseInt(ta.image);
         if(cantidadValores > tamanio) tabla2.add("Error sem\u00e1ntico: Se exedio el tama\u00f1o del arreglo");
         if(cantidadValores < tamanio) tabla2.add("Error sem\u00e1ntico: No se abarco todo el tama\u00f1o del arreglo");
         if(tamanio == 0) tabla2.add("Error sem\u00e1ntico: Valor no permitido");
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public int ValoresEntero(int cantidadValores) throws ParseException {
    jj_consume_token(ENTEROS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      cantidadValores = ValoresEntero(cantidadValores + 1);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
{if ("" != null) return cantidadValores;}
    throw new Error("Missing return statement in function");
  }

  final public int ValoresCadena(int cantidadValores) throws ParseException {
    jj_consume_token(VCAD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      cantidadValores = ValoresCadena(cantidadValores + 1);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
{if ("" != null) return cantidadValores;}
    throw new Error("Missing return statement in function");
  }

  final public void SentenciasProcedimientos() throws ParseException {Token t;
    try {
tablaSimbolos.enterScope();
      jj_consume_token(PROC);
      PalabrasReservadas();
      jj_consume_token(VOID);
      t = jj_consume_token(IDENTIFICADOR);
emit("Proc", t.image, "", "void");
            if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbolV(t.image);
      jj_consume_token(PARENIZQ);
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_12:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
      }
      jj_consume_token(LLAVEDER);
tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void SentenciasFunciones() throws ParseException {Token t, t1;
    try {
tablaSimbolos.enterScope();
      jj_consume_token(FUNC);
      PalabrasReservadas();
      t1 = tipoDato();
      t = jj_consume_token(IDENTIFICADOR);
emit("func", t.image, "", t1.image);
            if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
      jj_consume_token(PARENIZQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        parametros();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
        Codigo();
      }
      jj_consume_token(RETURN);
      t = valor2(t1.image);
      jj_consume_token(DELIMITADOR);
      jj_consume_token(LLAVEDER);
String temp = newTemp();
            emit("return", t.image, "", temp);
        tablaSimbolos.exitScope();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

/*
void returnStatement(Token t) : {}
{
    try{
        <RETURN> valor2(token.imagen) <DELIMITADOR>
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}
*/
  final public void parametros() throws ParseException {Token t, t1;
    try {
      t = jj_consume_token(IDENTIFICADOR);
      t1 = tipoDato();
emit("param", t.image, "", t1.image);

               if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
               else tablaSimbolos.addSymbol(t.image, t1.image);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMA);
        t = jj_consume_token(IDENTIFICADOR);
        t1 = tipoDato();
emit("param", t.image, "", t1.image);

                        if(tablaSimbolos.contains(t.image)) tabla2.add("Error sem\u00e1ntico: La variable " + t.image + " ya ha sido declarada");
                        else tablaSimbolos.addSymbol(t.image, t1.image);
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void PalabrasReservadas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUBLICO:{
      jj_consume_token(PUBLICO);
      break;
      }
    case PRIVADO:{
      jj_consume_token(PRIVADO);
      break;
      }
    case ESTATICO:{
      jj_consume_token(ESTATICO);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalizadorARMTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600003a0,0x600003a0,0x200000,0x1e0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x600003a0,0x0,0x600003a0,0xe0000,0xe0000,0x7d00000,0x600003a0,0xc00,0xc00,0x7000,0x7000,0x18000000,0x600003a0,0x18000,0x0,0x0,0x600003a0,0x0,0x600003a0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000001a,0x8000001a,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x8000001a,0x4,0x8000001a,0x0,0x0,0x0,0x8000001a,0x0,0x0,0x0,0x0,0x1000,0x8000001a,0x0,0x80,0x80,0x8000001a,0x0,0x8000001a,0x80,0x70000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x3,0x3,0x0,0x0,0x6,0x6,0x6,0x0,0x6,0x6,0x3,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x6,0x3,0x0,0x0,0x0,0x3,0x2,0x3,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AnalizadorARM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorARM(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorARMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorARM(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorARMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorARM(AnalizadorARMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorARMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
